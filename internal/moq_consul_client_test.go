// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"sync"
)

// Ensure, that MockConsul does implement Consul.
// If this is not the case, regenerate this file with moq.
var _ Consul = &MockConsul{}

// MockConsul is a mock implementation of Consul.
//
// 	func TestSomethingThatUsesConsul(t *testing.T) {
//
// 		// make and configure a mocked Consul
// 		mockedConsul := &MockConsul{
// 			BootstrapFunc: func() (string, error) {
// 				panic("mock out the Bootstrap method")
// 			},
// 			RegisterACLFunc: func(description string, policy string) (string, error) {
// 				panic("mock out the RegisterACL method")
// 			},
// 			RegisterIntentionFunc: func(file string) error {
// 				panic("mock out the RegisterIntention method")
// 			},
// 			RegisterPolicyFunc: func(name string, file string) error {
// 				panic("mock out the RegisterPolicy method")
// 			},
// 			RegisterServiceFunc: func(file string) error {
// 				panic("mock out the RegisterService method")
// 			},
// 			UpdateACLFunc: func(tokenID string, policy string) error {
// 				panic("mock out the UpdateACL method")
// 			},
// 			UpdatePolicyFunc: func(name string, file string) error {
// 				panic("mock out the UpdatePolicy method")
// 			},
// 		}
//
// 		// use mockedConsul in code that requires Consul
// 		// and then make assertions.
//
// 	}
type MockConsul struct {
	// BootstrapFunc mocks the Bootstrap method.
	BootstrapFunc func() (string, error)

	// RegisterACLFunc mocks the RegisterACL method.
	RegisterACLFunc func(description string, policy string) (string, error)

	// RegisterIntentionFunc mocks the RegisterIntention method.
	RegisterIntentionFunc func(file string) error

	// RegisterPolicyFunc mocks the RegisterPolicy method.
	RegisterPolicyFunc func(name string, file string) error

	// RegisterServiceFunc mocks the RegisterService method.
	RegisterServiceFunc func(file string) error

	// UpdateACLFunc mocks the UpdateACL method.
	UpdateACLFunc func(tokenID string, policy string) error

	// UpdatePolicyFunc mocks the UpdatePolicy method.
	UpdatePolicyFunc func(name string, file string) error

	// calls tracks calls to the methods.
	calls struct {
		// Bootstrap holds details about calls to the Bootstrap method.
		Bootstrap []struct {
		}
		// RegisterACL holds details about calls to the RegisterACL method.
		RegisterACL []struct {
			// Description is the description argument value.
			Description string
			// Policy is the policy argument value.
			Policy string
		}
		// RegisterIntention holds details about calls to the RegisterIntention method.
		RegisterIntention []struct {
			// File is the file argument value.
			File string
		}
		// RegisterPolicy holds details about calls to the RegisterPolicy method.
		RegisterPolicy []struct {
			// Name is the name argument value.
			Name string
			// File is the file argument value.
			File string
		}
		// RegisterService holds details about calls to the RegisterService method.
		RegisterService []struct {
			// File is the file argument value.
			File string
		}
		// UpdateACL holds details about calls to the UpdateACL method.
		UpdateACL []struct {
			// TokenID is the tokenID argument value.
			TokenID string
			// Policy is the policy argument value.
			Policy string
		}
		// UpdatePolicy holds details about calls to the UpdatePolicy method.
		UpdatePolicy []struct {
			// Name is the name argument value.
			Name string
			// File is the file argument value.
			File string
		}
	}
	lockBootstrap         sync.RWMutex
	lockRegisterACL       sync.RWMutex
	lockRegisterIntention sync.RWMutex
	lockRegisterPolicy    sync.RWMutex
	lockRegisterService   sync.RWMutex
	lockUpdateACL         sync.RWMutex
	lockUpdatePolicy      sync.RWMutex
}

// Bootstrap calls BootstrapFunc.
func (mock *MockConsul) Bootstrap() (string, error) {
	callInfo := struct {
	}{}
	mock.lockBootstrap.Lock()
	mock.calls.Bootstrap = append(mock.calls.Bootstrap, callInfo)
	mock.lockBootstrap.Unlock()
	if mock.BootstrapFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.BootstrapFunc()
}

// BootstrapCalls gets all the calls that were made to Bootstrap.
// Check the length with:
//     len(mockedConsul.BootstrapCalls())
func (mock *MockConsul) BootstrapCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBootstrap.RLock()
	calls = mock.calls.Bootstrap
	mock.lockBootstrap.RUnlock()
	return calls
}

// RegisterACL calls RegisterACLFunc.
func (mock *MockConsul) RegisterACL(description string, policy string) (string, error) {
	callInfo := struct {
		Description string
		Policy      string
	}{
		Description: description,
		Policy:      policy,
	}
	mock.lockRegisterACL.Lock()
	mock.calls.RegisterACL = append(mock.calls.RegisterACL, callInfo)
	mock.lockRegisterACL.Unlock()
	if mock.RegisterACLFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.RegisterACLFunc(description, policy)
}

// RegisterACLCalls gets all the calls that were made to RegisterACL.
// Check the length with:
//     len(mockedConsul.RegisterACLCalls())
func (mock *MockConsul) RegisterACLCalls() []struct {
	Description string
	Policy      string
} {
	var calls []struct {
		Description string
		Policy      string
	}
	mock.lockRegisterACL.RLock()
	calls = mock.calls.RegisterACL
	mock.lockRegisterACL.RUnlock()
	return calls
}

// RegisterIntention calls RegisterIntentionFunc.
func (mock *MockConsul) RegisterIntention(file string) error {
	callInfo := struct {
		File string
	}{
		File: file,
	}
	mock.lockRegisterIntention.Lock()
	mock.calls.RegisterIntention = append(mock.calls.RegisterIntention, callInfo)
	mock.lockRegisterIntention.Unlock()
	if mock.RegisterIntentionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RegisterIntentionFunc(file)
}

// RegisterIntentionCalls gets all the calls that were made to RegisterIntention.
// Check the length with:
//     len(mockedConsul.RegisterIntentionCalls())
func (mock *MockConsul) RegisterIntentionCalls() []struct {
	File string
} {
	var calls []struct {
		File string
	}
	mock.lockRegisterIntention.RLock()
	calls = mock.calls.RegisterIntention
	mock.lockRegisterIntention.RUnlock()
	return calls
}

// RegisterPolicy calls RegisterPolicyFunc.
func (mock *MockConsul) RegisterPolicy(name string, file string) error {
	callInfo := struct {
		Name string
		File string
	}{
		Name: name,
		File: file,
	}
	mock.lockRegisterPolicy.Lock()
	mock.calls.RegisterPolicy = append(mock.calls.RegisterPolicy, callInfo)
	mock.lockRegisterPolicy.Unlock()
	if mock.RegisterPolicyFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RegisterPolicyFunc(name, file)
}

// RegisterPolicyCalls gets all the calls that were made to RegisterPolicy.
// Check the length with:
//     len(mockedConsul.RegisterPolicyCalls())
func (mock *MockConsul) RegisterPolicyCalls() []struct {
	Name string
	File string
} {
	var calls []struct {
		Name string
		File string
	}
	mock.lockRegisterPolicy.RLock()
	calls = mock.calls.RegisterPolicy
	mock.lockRegisterPolicy.RUnlock()
	return calls
}

// RegisterService calls RegisterServiceFunc.
func (mock *MockConsul) RegisterService(file string) error {
	callInfo := struct {
		File string
	}{
		File: file,
	}
	mock.lockRegisterService.Lock()
	mock.calls.RegisterService = append(mock.calls.RegisterService, callInfo)
	mock.lockRegisterService.Unlock()
	if mock.RegisterServiceFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RegisterServiceFunc(file)
}

// RegisterServiceCalls gets all the calls that were made to RegisterService.
// Check the length with:
//     len(mockedConsul.RegisterServiceCalls())
func (mock *MockConsul) RegisterServiceCalls() []struct {
	File string
} {
	var calls []struct {
		File string
	}
	mock.lockRegisterService.RLock()
	calls = mock.calls.RegisterService
	mock.lockRegisterService.RUnlock()
	return calls
}

// UpdateACL calls UpdateACLFunc.
func (mock *MockConsul) UpdateACL(tokenID string, policy string) error {
	callInfo := struct {
		TokenID string
		Policy  string
	}{
		TokenID: tokenID,
		Policy:  policy,
	}
	mock.lockUpdateACL.Lock()
	mock.calls.UpdateACL = append(mock.calls.UpdateACL, callInfo)
	mock.lockUpdateACL.Unlock()
	if mock.UpdateACLFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateACLFunc(tokenID, policy)
}

// UpdateACLCalls gets all the calls that were made to UpdateACL.
// Check the length with:
//     len(mockedConsul.UpdateACLCalls())
func (mock *MockConsul) UpdateACLCalls() []struct {
	TokenID string
	Policy  string
} {
	var calls []struct {
		TokenID string
		Policy  string
	}
	mock.lockUpdateACL.RLock()
	calls = mock.calls.UpdateACL
	mock.lockUpdateACL.RUnlock()
	return calls
}

// UpdatePolicy calls UpdatePolicyFunc.
func (mock *MockConsul) UpdatePolicy(name string, file string) error {
	callInfo := struct {
		Name string
		File string
	}{
		Name: name,
		File: file,
	}
	mock.lockUpdatePolicy.Lock()
	mock.calls.UpdatePolicy = append(mock.calls.UpdatePolicy, callInfo)
	mock.lockUpdatePolicy.Unlock()
	if mock.UpdatePolicyFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePolicyFunc(name, file)
}

// UpdatePolicyCalls gets all the calls that were made to UpdatePolicy.
// Check the length with:
//     len(mockedConsul.UpdatePolicyCalls())
func (mock *MockConsul) UpdatePolicyCalls() []struct {
	Name string
	File string
} {
	var calls []struct {
		Name string
		File string
	}
	mock.lockUpdatePolicy.RLock()
	calls = mock.calls.UpdatePolicy
	mock.lockUpdatePolicy.RUnlock()
	return calls
}
